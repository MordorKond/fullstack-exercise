// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url = env("DATABASE_URL")
  relationMode = "prisma"
}

model Tweet {
    id        String   @id @default(uuid())
    userId    String
    content   String    
    createdAt DateTime @default(now())
    user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    likes     Like[]
    @@index([userId])
    @@unique([createdAt,id])

}
model Article {
    id        String   @id @default(uuid())
    userId    String
    content   String  @db.VarChar(6000)
    title     String  @db.VarChar(75)
    perex     String  @db.VarChar(250)
    imageId     String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt()
    user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    // likes     Like[]
    comments Comment[]
    @@index([userId])
    @@unique([createdAt,id])

}
model Comment {
    id          String  @id @default(uuid())
    userId      String
    articleId   String
    content     String
    upVotes     UpVote[]
    downVotes   DownVote[]
    createdAt   DateTime    @default(now())
    article     Article @relation(fields: [articleId],references: [id],onDelete: Cascade)
    user        User    @relation(fields: [userId],references: [id],onDelete: Cascade)

    @@index([articleId])
    @@index([userId])
    @@unique([createdAt,id])
}
model UpVote {
    userId String
    commentId String
    user User @relation(fields: [userId], references: [id],onDelete: Cascade)
    comment Comment @relation(fields: [commentId], references: [id],onDelete: Cascade)

    @@id([userId,commentId])
    @@index([userId])
    @@index([commentId])
}
model DownVote {
    userId String
    commentId String
    user User @relation(fields: [userId], references: [id],onDelete: Cascade)
    comment Comment @relation(fields: [commentId], references: [id],onDelete: Cascade)

    @@id([userId,commentId])
    @@index([userId])
    @@index([commentId])
}
model Like {
    userId String
    tweetId String
    user User @relation(fields: [userId], references: [id],onDelete: Cascade)
    tweet Tweet @relation(fields: [tweetId], references: [id],onDelete: Cascade)

    @@id([userId,tweetId])
    @@index([userId])
    @@index([tweetId])
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String?  @db.Text
    access_token      String?  @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String?  @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
    @@index([userId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    
     @@index([userId])

}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    //non next auth
    tweets        Tweet[]
    articles      Article[]
    comments      Comment[]
    upVotes       UpVote[]
    downVotes     DownVote[]
    likes         Like[]
    followers     User[] @relation(name:"Followers")
    follows       User[] @relation(name:"Followers")
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}
